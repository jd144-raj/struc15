package P7;

import java.util.*;

public class DAG {
    
    static class Edge {
        int dest, weight;
        Edge(int dest, int weight) {
            this.dest = dest;
            this.weight = weight;
        }
    }

    private int V;
    private List<List<Edge>> adjList;

    public DAG(int V) {
        this.V = V;
        adjList = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adjList.add(new ArrayList<>());
        }
    }

    public void addEdge(int src, int dest, int weight) {
        adjList.get(src).add(new Edge(dest, weight));
    }

    public void findShortestPaths(int source) {
        Stack<Integer> stack = new Stack<>();
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        boolean[] visited = new boolean[V];
        for (int i = 0; i < V; i++) {
            if (!visited[i]) topologicalSort(i, visited, stack);
        }

        while (!stack.isEmpty()) {
            int u = stack.pop();
            if (dist[u] != Integer.MAX_VALUE) {
                for (Edge edge : adjList.get(u)) {
                    if (dist[edge.dest] > dist[u] + edge.weight) {
                        dist[edge.dest] = dist[u] + edge.weight;
                    }
                }
            }
        }

        for (int i = 0; i < V; i++) {
            System.out.println("Distance from " + source + " to " + i + " is " + (dist[i] == Integer.MAX_VALUE ? "INF" : dist[i]));
        }
    }

    private void topologicalSort(int v, boolean[] visited, Stack<Integer> stack) {
        visited[v] = true;
        for (Edge edge : adjList.get(v)) {
            if (!visited[edge.dest]) topologicalSort(edge.dest, visited, stack);
        }
        stack.push(v);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();
        DAG graph = new DAG(V);

        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        System.out.println("Enter edges (source, destination, weight): ");
        for (int i = 0; i < E; i++) {
            int src = sc.nextInt();
            int dest = sc.nextInt();
            int weight = sc.nextInt();
            graph.addEdge(src, dest, weight);
        }

        System.out.print("Enter source vertex: ");
        int source = sc.nextInt();
        graph.findShortestPaths(source);
        sc.close();
    }
}
