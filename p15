package P15;

import java.util.Arrays;
import java.util.Scanner;

public class MaxBipar {

    // Function to check if a matching for vertex u is possible
    boolean bpm(boolean[][] bpGraph, int u, boolean[] seen, int[] matchR) {
        // Try every job one by one
        for (int v = 0; v < bpGraph[0].length; v++) {
            // If applicant u is interested in job v and v is not visited
            if (bpGraph[u][v] && !seen[v]) {
                seen[v] = true; // Mark job v as visited

                // If job v is not assigned to an applicant OR the previously assigned
                // applicant has an alternate job available.
                if (matchR[v] < 0 || bpm(bpGraph, matchR[v], seen, matchR)) {
                    matchR[v] = u;
                    return true;
                }
            }
        }
        return false;
    }

    // Returns maximum number of matching from M to N
    int maxBPM(boolean[][] bpGraph) {
        int M = bpGraph.length; // Number of applicants
        int N = bpGraph[0].length; // Number of jobs

        // Array to keep track of the applicant assigned to a job.
        int[] matchR = new int[N];

        // Initially all jobs are available
        Arrays.fill(matchR, -1);

        int result = 0; // Count of jobs assigned to applicants
        for (int u = 0; u < M; u++) {
            // Mark all jobs as not seen for the next applicant.
            boolean[] seen = new boolean[N];
            Arrays.fill(seen, false);

            // Find if the applicant u can get a job
            if (bpm(bpGraph, u, seen, matchR)) {
                result++;
            }
        }
        return result;
    }

    // Main method to test the Maximum Bipartite Matching algorithm
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the number of applicants
        System.out.print("Enter the number of applicants: ");
        int M = scanner.nextInt();

        // Input the number of jobs
        System.out.print("Enter the number of jobs: ");
        int N = scanner.nextInt();

        // Initialize the bipartite graph
        boolean[][] bpGraph = new boolean[M][N];

        // Input the bipartite graph
        System.out.println("Enter the edges between applicants and jobs (as pairs of indices):");
        System.out.println("Enter '-1 -1' to stop entering edges.");
        while (true) {
            System.out.print("Enter applicant index and job index: ");
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            if (u == -1 || v == -1) {
                break; // Stop input on sentinel value
            }
            if (u >= 0 && u < M && v >= 0 && v < N) {
                bpGraph[u][v] = true;
            } else {
                System.out.println("Invalid indices. Please try again.");
            }
        }

        // Calculate the maximum bipartite matching
        MaxBipar mbm = new MaxBipar();
        int maxMatching = mbm.maxBPM(bpGraph);
        System.out.println("Maximum number of applicants that can get a job is: " + maxMatching);

        scanner.close();
    }
}
