package P10;
import java.util.Scanner;

public class KMP {

    // Function to implement KMP pattern matching algorithm
    public static void KMPSearch(String pattern, String text) {
        int M = pattern.length();
        int N = text.length();

        // Create lps[] that will hold the longest prefix suffix values for pattern
        int[] lps = new int[M];
        int j = 0;  // index for pattern[]

        // Preprocess the pattern (calculate lps[] array)
        computeLPSArray(pattern, M, lps);

        int i = 0;  // index for text[]
        while (i < N) {
            if (pattern.charAt(j) == text.charAt(i)) {
                j++;
                i++;
            }
            if (j == M) {
                System.out.println("Found pattern at index " + (i - j));
                j = lps[j - 1];
            }

            // mismatch after j matches
            else if (i < N && pattern.charAt(j) != text.charAt(i)) {
                // Do not match lps[0..lps[j-1]] characters, they will match anyway
                if (j != 0)
                    j = lps[j - 1];
                else
                    i = i + 1;
            }
        }
    }

    // Function to compute the longest prefix suffix array
    public static void computeLPSArray(String pattern, int M, int[] lps) {
        // Length of the previous longest prefix suffix
        int len = 0;
        int i = 1;
        lps[0] = 0; // lps[0] is always 0

        // Loop calculates lps[i] for i = 1 to M-1
        while (i < M) {
            if (pattern.charAt(i) == pattern.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = len;
                    i++;
                }
            }
        }
    }

    // Main method to test the KMP algorithm
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the text
        System.out.print("Enter the text: ");
        String text = scanner.nextLine();

        // Input the pattern
        System.out.print("Enter the pattern: ");
        String pattern = scanner.nextLine();

        System.out.println("Text: " + text);
        System.out.println("Pattern: " + pattern);
        
        // Perform KMP search
        KMPSearch(pattern, text);
        
        scanner.close();
    }
}
